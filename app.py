from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from neo4j import GraphDatabase
from dotenv import load_dotenv
from create_users import sha256_hash
import os
from flask_csp.csp import csp_header

load_dotenv()
user = os.getenv('NEO4J_USER')
password = os.getenv('NEO4J_PASS')
url = os.getenv('NEO4J_URL')

driver = GraphDatabase.driver(url, auth=(user, password))
app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY')

CSP_POLICY = {"default-src": "'self'",
              'script-src': [
                  "'self'",
                  'https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js']
              }

@app.route('/')
def index():
    error = None
    session.clear()
    return render_template('login.html', error=error)


@app.route('/login', methods=['POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form['username']
        password = sha256_hash(request.form['password'])

        with driver.session() as neo:
            query = f'''
                match (n) where n.username = $username and n.password = $password return count(n) as exists
                '''

            results = [dict(record) for record in neo.run(query, password=password, username=username)]
            driver.close()
            if results[0]['exists'] == 0:
                error = 'Invalid credentials. Please try again.'
                return render_template('login.html', error=error)
            else:
                session['username'] = username
                return redirect(url_for('home'))


@app.route('/home')
@csp_header()
def home():
    if 'username' in session:
        with driver.session() as neo:
            query = f'''
                match (n) where n.username = '{session['username']}'
                optional match (n)-[:CAUGHT]-(p)
                return collect(p.Name) as caught
                '''

            results = [dict(record) for record in neo.run(query)]
            driver.close()
            return render_template('home.html',
                                   pokemon=results[0]['caught'], username=session['username'])
    else:
        return redirect(url_for('index'))


@app.route('/search', methods=['POST'])
def search():
    if 'username' in session:
        try:
            data = request.json
            term = data.get('term', '')
            with driver.session() as neo:
                query = f'''
                    OPTIONAL MATCH (n) WHERE n.username = '{session['username']}'
                    WITH n
                    OPTIONAL MATCH (p:Pokemon)
                    WHERE p.Name CONTAINS '{term}'
                    WITH n, rand() AS r, p
                    ORDER BY r
                    LIMIT 1
                    CREATE (n)-[:CAUGHT]->(p)
                    RETURN p.Name AS caught
                    '''
                results = [dict(record) for record in neo.run(query)]
                driver.close()
                return jsonify({'pokemon': results[0]['caught']})
        except Exception as e:
            return jsonify({'pokemon': ''})
    else:
        return redirect(url_for('index'))


@app.route('/logout', methods=['POST'])
def logout():
    if 'username' in session:
        session.pop('username', None)
        return redirect(url_for('index'))
    else:
        return redirect(url_for('index'))


if __name__ == '__main__':
    app.run(debug=True, port=8001)
